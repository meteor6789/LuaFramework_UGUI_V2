---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by loon.
--- DateTime: 2019-09-24 17:52
---
local HttpRequest = class("HttpRequest")

function HttpRequest:ctor()
    self:initData()
end

function HttpRequest:initData()
    self.failedTimesNum = 0
    self.maxTryTimes = 0
    self.callBackFunc = nil
    self.params = nil
    self.tryDuration = 1
end

function HttpRequest:setFailedTimesNum(num)
    self.failedTimesNum = num

    if self.failedTimesNum < self.maxTryTimes then
        scheduler.performWithDelayGlobal(function()
            self:request(self.params)
        end,self.tryDuration)
    else
        if self.callBackFunc then
            self.callBackFunc(httpConst.reponseCode.rqsFailed)
        end
    end
end

function HttpRequest:request(params)
    self.params = params
    if params.maxTryTimes then
        self.maxTryTimes = params.maxTryTimes
    end
    if params.tryDuration then
        self.tryDuration = params.tryDuration
    end

    self.maxTryCallBackFunc = params.maxTryCallBackFunc
    self.callBackFunc = params.callBackFunc
    local canNetUse = gameUtil.checkNetWork(function()
        self:sendHttpEvent(httpConst.reponseCode.noUsableNet, nil, params.customsData)
        if self.callBackFunc then
            self.callBackFunc(httpConst.reponseCode.noUsableNet)
        end
    end)

    printInfo("canNetUse %s",canNetUse)
    if not canNetUse then
        return
    end

    local requestType = params.requestType or "POST"
    local responseType = params.responseType or cc.XMLHTTPREQUEST_RESPONSE_JSON
    local sendData = self:getSendData(params)
    local url = params.url or nil

    local curSign = self.params.sign or httpConst.SIGNKEY
    local signSercet = md5.sumhexa(json.encode(sendData)..curSign)

    local xmlHttpReq = cc.XMLHttpRequest:new()
    local scheduleId = 1
    scheduleId =  scheduler.scheduleGlobal(function()
        xmlHttpReq:abort()
        scheduler.unscheduleGlobal(scheduleId)
        self:sendHttpEvent(httpConst.reponseCode.rqsFailed, nil, params.customsData)
        if self.callBackFunc then
            self.callBackFunc(httpConst.reponseCode.rqsFailed)
        end
    end,5)
    -- printInfo("scheduleId",scheduleId)
    xmlHttpReq.responseType = responseType
    xmlHttpReq:setRequestHeader("Content-Type","text/plain")
    xmlHttpReq:setRequestHeader("sign",signSercet)
    printInfo("%s url = %s",tostring(requestType),url)
    xmlHttpReq:open(requestType, url)
    xmlHttpReq:registerScriptHandler(function()
        local response = nil
        printInfo("xmlHttpReq.readyState %d",xmlHttpReq.readyState)
        printInfo("xmlHttpReq.status %d",xmlHttpReq.status)
        printInfo("xmlHttpReq.response %s",xmlHttpReq.response)
        if xmlHttpReq.readyState == 4 and (xmlHttpReq.status >= 200 and xmlHttpReq.status < 207) then
            response = xmlHttpReq.response
            self:sendHttpEvent(httpConst.reponseCode.success, response, params.customsData)
            self:successCallBack(response)
        else
            self:failedCallBack(params)
        end

        printInfo("scheduleId",scheduleId)
        gameUtil.unscheduleScriptEntry(scheduleId)

    end)

    if sendData then
        local jsonData = json.encode(sendData)
        printInfo("sin jsonData"..jsonData)
        xmlHttpReq:send(jsonData)
    else
        xmlHttpReq:send()
    end

end


function HttpRequest:getSendData(params)
    local sendData = params.sendData or nil
    if not sendData then
        sendData = {}
    end

    sendData.areaId = gameAreaId
    sendData.versionName = getGameVersion()
    sendData.channel = getChannelName()
    sendData.platform = device.platform
    local timeMilseconds = os.time() * 1000 + GlobalData.fixTimeDur
    sendData.time = timeMilseconds
    if GlobalData.clientConfigs.newSign then
        sendData.newSign = md5.sumhexa(timeMilseconds.."_".. GlobalData.clientConfigs.newSign)
    end
    return sendData
end

function HttpRequest:failedCallBack(params)
    self:setFailedTimesNum(self.failedTimesNum + 1)
    local curHost = AddressManager:getHttpHost()
    local needChangeHost = string.find(params.url, curHost)
    if needChangeHost ~= nil then
        AddressManager:addHttpConnectFailedCount()
    end

end

function HttpRequest:successCallBack(response)
    if self.callBackFunc then
        self.callBackFunc(httpConst.reponseCode.success,response)
    end
    local needChangeHost = string.find(self.params.url, AddressManager:getHttpHost())
    if needChangeHost ~= nil then
        AddressManager:resetHttpCount()
    end
    if response and not localVersion and GlobalData.fixTimeDur == 0 then
        local jsonData = json.decode(response)
        if jsonData.timestamp then
            GlobalData.fixTimeDur = jsonData.timestamp - os.time() * 1000
        end
    end
end

function HttpRequest:sendHttpEvent(code, response, customsData)
    if customsData == nil then
        return
    end
    local sendData = {
        code = code,
        res = response,
        customsData = customsData
    }
    gameUtil.sendEvent(EVENT_LISTNENER_EREA.ALL, EVENT_LISTNENER_INDEX_APP.ALL.RECV_HTTP_REQUEST_EVENT, sendData)
end
return HttpRequest